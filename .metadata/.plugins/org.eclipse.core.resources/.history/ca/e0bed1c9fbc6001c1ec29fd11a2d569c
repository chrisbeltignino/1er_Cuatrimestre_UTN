#include <stdio.h>

#define LIBRE 0
#define OCUPADO 1

typedef struct
{
	int id;
	char name[51];
	char lastName[51];
	float price;
	char flycode[10];
	int idType;
	int isEmpty;
} Passenger;

typedef struct
{
    int idType;
    char typePassenger[20];
} Type;

int cargarPasajero(Passenger list[], int len, int id, char name[],char lastName[],float price, Type typeP[], char flycode[], int* ultimoIdIngresado);
void mostrarUnPasajero(Passenger list, Type* typeP, int len);
int menuDeOpciones(char mensaje[]);
int pedirCaracter(char* caracter, char* mensaje);
int pedirEntero(int* entero, char* mensaje, char* mensajeError, int min, int max);
int pedirFlotante(float* flotante, char* mensaje, char* mensajeError, float min, float max);
int pedirCadena(char* cadena, char* mensaje, char* mensajeError, int max);
int verificarConfirmacion(char* mensaje);

void indicoPasajero(Passenger list[], int len, int status);

/** \brief To indicate that all position in the array are empty,
* this function put the flag (isEmpty) in TRUE in all
* position of the array
* \param list Passenger* Pointer to array of passenger
* \param len int Array length
* \return int Return (-1) if Error [Invalid length or NULL pointer] - (0) if Ok
*
*/
int initPassengers(Passenger list[],int len);

/** \brief add in a existing list of passengers the values received as parameters
* in the first empty position
* \param list passenger*
* \param len int
* \param id int
* \param name[] char
* \param lastName[] char
* \param price float
* \param typePassenger int
* \param flycode[] char
* \return int Return (-1) if Error [Invalid length or NULL pointer or without
		  free space] - (0) if Ok
*/
int addPassenger(Passenger* list, int len, int id, char name[],char lastName[],float price, Type* typeP, char flycode[]);

/** \brief find a Passenger by Id en returns the index position in array.
*
* \param list Passenger*
* \param len int
* \param id int
* \return Return passenger index position or (-1) if [Invalid length or
NULL pointer received or passenger not found]
*
*/
int findPassengerById(Passenger* list, int len, int id);

/** \brief Remove a Passenger by Id (put isEmpty Flag in 1)
*
* \param list Passenger*
* \param len int
* \param id int
* \return int Return (-1) if Error [Invalid length or NULL pointer or if can't
find a passenger] - (0) if Ok
*
*/
int removePassenger(Passenger* list, int len, int id);

/** \brief Sort the elements in the array of passengers, the argument order
indicate UP or DOWN order
*
* \param list Passenger*
* \param len int
* \param order int [1] indicate UP - [0] indicate DOWN
* \return int Return (-1) if Error [Invalid length or NULL pointer] - (0) if Ok
*
*/
int sortPassengers(Passenger* list, int len, int order);

/** \brief print the content of passengers array
*
* \param list Passenger*
* \param length int
* \return int
*
*/
int printPassenger(Passenger* list, int length ,Type* typeP, int len);

